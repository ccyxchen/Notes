1、 运行
在 Windows 系统下使用 qemu-system-x86_64.exe 运行 .iso 镜像，可按以下步骤操作：
前提条件
确保已经安装了 QEMU，并且 qemu-system-x86_64.exe 所在的目录已经添加到系统的环境变量 PATH 中，这样可以在任意位置调用该命令；若未添加到环境变量，需要在命令中使用该可执行文件的完整路径。
基本命令
以下是运行 .iso 镜像的基本命令示例：
收起
powershell




qemu-system-x86_64.exe -cdrom path/to/your/image.iso -m 2048 -cpu host -smp 2
参数解释
	• -cdrom path/to/your/image.iso：指定要使用的 .iso 镜像文件，需要将 path/to/your/image.iso 替换为实际 .iso 镜像文件的路径。
	• -m 2048：为虚拟机分配 2048MB（即 2GB）的内存。你可以根据实际需求调整内存大小，例如 -m 4096 表示分配 4GB 内存。
	• -cpu host：让虚拟机使用宿主机的 CPU 特性，这样可以提高虚拟机的性能。
	• -smp 2：设置虚拟机使用 2 个虚拟 CPU 核心。你可以根据宿主机的 CPU 核心数量和实际需求调整该参数，例如 -smp 4 表示使用 4 个虚拟 CPU 核心。
其他常用参数及示例
图形界面显示
默认情况下，QEMU 会打开一个窗口来显示虚拟机的图形界面。如果想要禁用图形界面，使用 -nographic 参数，同时可结合 -serial mon:stdio 将串口输出重定向到标准输入输出，方便在命令行查看信息：
收起
powershell




qemu-system-x86_64.exe -cdrom path/to/your/image.iso -m 2048 -cpu host -smp 2 -nographic -serial mon:stdio
创建虚拟硬盘
如果需要在虚拟机中安装操作系统，可创建一个虚拟硬盘用于存储数据，使用 -hda 参数指定虚拟硬盘文件：
收起
powershell




qemu-system-x86_64.exe -cdrom path/to/your/image.iso -hda path/to/your/virtual_disk.img -m 2048 -cpu host -smp 2
其中，path/to/your/virtual_disk.img 是虚拟硬盘文件的路径。如果该文件不存在，QEMU 会自动创建它。你可以使用 qemu-img 工具预先创建指定大小和格式的虚拟硬盘，例如创建一个 20GB 的 qcow2 格式虚拟硬盘：
收起
powershell




qemu-img create -f qcow2 path/to/your/virtual_disk.img 20G
网络设置
使用用户模式网络，允许虚拟机通过宿主机访问外部网络：
收起
powershell




qemu-system-x86_64.exe -cdrom path/to/your/image.iso -hda path/to/your/virtual_disk.img -m 2048 -cpu host -smp 2 -net user -net nic
	• -net user：启用 QEMU 的用户模式网络。
	• -net nic：创建一个虚拟网络接口卡（NIC）。

来自 <https://www.doubao.com/chat/1737585579045634> 

以下是使用qemu-system-x86_64.exe启动时指定输出内核 log 到串口，并在 Windows 上查看该串口 log 的方法：
启动时指定输出内核 log 到串口
在使用qemu-system-x86_64.exe启动虚拟机时，通过在-append参数中添加console=ttyS0来指定将内核 log 输出到串口。以下是一个完整的命令示例：
收起
powershell




qemu-system-x86_64.exe -kernel bzImage -initrd initrd.img -append "root=/dev/ram0 rw console=ttyS0" -nographic -serial mon:stdio
	• -serial mon:stdio：这一参数将串口输出重定向到标准输出，这样内核 log 会显示在启动 QEMU 的命令行窗口中。如果想将串口输出到一个文件，可以使用-serial file:log.txt，这样内核 log 会被输出到log.txt文件中。
在 Windows 上查看串口 log
	• 使用串口工具：如果 QEMU 配置为将串口输出到一个真实的串口设备（例如COM1），可以使用如Putty、Tera Term等串口工具来查看串口 log。以Putty为例，打开Putty，在左侧类别中选择Serial，在右侧Serial line中输入串口号（如COM1），在Speed中设置波特率（通常为115200），然后点击Open即可查看串口 log。
	• 查看 QEMU 输出窗口：如果使用了-serial mon:stdio参数，直接在启动 QEMU 的 PowerShell 窗口或命令提示符窗口中查看内核 log 输出。
	• 查看日志文件：若使用了-serial file:log.txt等将输出重定向到文件的参数，直接打开指定的日志文件（如log.txt）查看内核 log 内容。
在查看串口 log 时，需要确保 QEMU 的串口配置与查看工具的设置相匹配，包括波特率、数据位、停止位、校验位等参数。

来自 <https://www.doubao.com/chat/1737585579045634> 

参数解释：
	• -net user：启用 QEMU 的用户模式网络，允许虚拟机通过宿主机访问外部网络。
	• -net nic：创建一个虚拟网络接口卡（NIC），用于虚拟机与宿主机之间的网络通信。

来自 <https://www.doubao.com/chat/1737585579045634> 

使用自编的内核，以及挂载自定义根文件系统
qemu-system-x86_64 -kernel bzImage -append "root=/dev/sda rw console=ttyS0" -hda rootfs.img -serial mon:stdio

根文件系统制作

将文件夹制作为ext4 镜像，并作为qemu-system-x86_64 的根文件系统
下面将详细介绍如何把文件夹制作为 ext4 镜像，并将其作为 qemu-system-x86_64 的根文件系统，整个过程主要分为三个步骤：创建 ext4 镜像文件、将文件夹内容复制到镜像中、使用 qemu-system-x86_64 启动并挂载该镜像作为根文件系统。
步骤 1：创建 ext4 镜像文件
首先，你需要创建一个指定大小的空文件，然后将其格式化为 ext4 文件系统。可以使用 dd 命令创建空文件，再用 mkfs.ext4 命令进行格式化。以下是示例命令：
bash





# 创建一个大小为 1G 的空文件，文件名设为 rootfs.img
dd if=/dev/zero of=rootfs.img bs=1G count=1
# 将 rootfs.img 文件格式化为 ext4 文件系统
mkfs.ext4 rootfs.img
解释：
	• dd if=/dev/zero of=rootfs.img bs=1G count=1：if=/dev/zero 表示输入文件为 /dev/zero 设备，它会不断输出零字节；of=rootfs.img 表示输出文件为 rootfs.img；bs=1G 表示块大小为 1GB；count=1 表示复制 1 个块，这样就创建了一个 1GB 大小的空文件。
	• mkfs.ext4 rootfs.img：将 rootfs.img 文件格式化为 ext4 文件系统。
步骤 2：将文件夹内容复制到镜像中
接下来，你需要把文件夹中的内容复制到刚刚创建的 ext4 镜像文件中。这可以通过挂载镜像文件到一个临时目录，然后使用 cp 命令复制文件来实现。示例命令如下：
bash





# 创建一个临时挂载点目录
mkdir /mnt/tmp_mount
# 将 ext4 镜像文件挂载到临时挂载点
 
# 将指定文件夹（例如 /path/to/your/folder）中的内容递归复制到挂载点
sudo cp -r /path/to/your/folder/. /mnt/tmp_mount
# 卸载挂载点
sudo umount /mnt/tmp_mount
# 删除临时挂载点目录
rmdir /mnt/tmp_mount
解释：
	• mkdir /mnt/tmp_mount：创建一个临时挂载点目录 /mnt/tmp_mount。
	• sudo mount -o loop rootfs.img /mnt/tmp_mount：使用 -o loop 选项将 rootfs.img 作为循环设备挂载到 /mnt/tmp_mount 目录。
	• sudo cp -r /path/to/your/folder/. /mnt/tmp_mount：将 /path/to/your/folder 文件夹中的所有内容递归复制到 /mnt/tmp_mount 目录。注意 . 表示复制文件夹内的所有内容，而不是文件夹本身。
	• sudo umount /mnt/tmp_mount：卸载挂载点。
	• rmdir /mnt/tmp_mount：删除临时挂载点目录。
步骤 3：使用 qemu-system-x86_64 启动并挂载该镜像作为根文件系统
最后，使用 qemu-system-x86_64 启动虚拟机，并将创建好的 ext4 镜像文件作为根文件系统。示例命令如下：
bash





qemu-system-x86_64 \
  -kernel /path/to/your/kernel \
  -append "root=/dev/sda rw console=ttyS0" \
  -hda rootfs.img \
  -nographic

来自 <https://www.doubao.com/chat/1737585579045634> 


 qemu-system-x86_64 -kernel  ~/work_open/opensource/linux_stable/linux/arch/x86/boot/bzImage -append "root=/dev/sda rw rootfstype=ext4 console=ttyS0" -drive file=rootfs.img,format=raw  -drive file=virtual_disk.img,format=qcow2 -drive file=virtual_disk_f2fs.img,format=qcow2  -serial mon:stdio  -net nic  -net tap,ifname=tap0

来自 <https://blog.csdn.net/u011011827/article/details/129771760> 


来自 <https://www.doubao.com/chat/1969057165850114> 

搭建 桥接网卡 

默认已经创建 虚拟网桥virbr0，还需要创建tap 设备

brctl show
sudo ip tuntap add dev tap0 mode tap
 sudo ifconfig tap0 up
sudo brctl addif virbr0 tap0
sudo systemctl restart NetworkManager.service

 运行虚拟机
 sudo qemu-system-x86_64 -kernel boot/vmlinuz64 -append "root=/dev/sda rw rootfstype=ext4 console=ttyS0" -drive file=rootfs.img,format=raw -serial mon:stdio -net nic  -net tap,ifname=tap0

设置 ssh 并远程连接

1、安装openssh
tce-load -wi openssh.tcz

来自 <https://www.doubao.com/chat/2033664354006786> 

2、启动openssh
sudo touch /usr/local/etc/ssh/sshd_config
sudo /usr/local/etc/init.d/openssh start
开机启动
sudo /usr/local/etc/init.d/openssh enable

3、设置密码
Passwd

4、启动

内核安装模块
sudo mount -o loop /home/cyx/work_open/opensource/tinycore/15.x/x86_64/release/Tinycore64/rootfs.img /mnt/tmp_mount
make install DESTDIR=~/work_open/opensource/tinycore/15.x/x86_64/release/Tinycore64/rootfs/

使用伪终端 
 -serial chardev:serial0 -chardev pty,id=serial0

* modules         - Build all modules
  modules_install - Install all modules to INSTALL_MOD_PATH (default: /)


解压 cpio
cpio -idmv < ../your_file.cpio



使用kgdb
 kgdboc=ttyS0,115200 kgdbwait

gdb vmlinux
target remote /dev/pts/4

alias starttiny='sudo qemu-system-x86_64 -kernel /home/cyx/work_open/opensource/linux_stable/linux/arch/x86/boot/bzImage -append "root=/dev/sda rw rootfstype=ext4 console=ttyS0,921600n8 tce=sda home=sda opt=sda" -drive file=/home/cyx/work_open/opensource/tinycore/15.x/x86_64/release/Tinycore64/rootfs.img,format=raw -serial chardev:serial0 -chardev pty,id=serial0 -net nic -net tap,ifname=tap0  -nographic'

使用 cgroup 

sudo mount -t cgroup2 none /sys/fs/cgroup/

 sudo mount -t cgroup -o blkio none /dev/blkio/

挂载多分区的img
1. 挂载镜像（访问内容）
使用 losetup 和 mount 命令挂载镜像中的分区：
bash





sudo losetup -P /dev/loop0 /path/to/piCore-15.0.0.img
	• 挂载分区 1（FAT32）：
bash





sudo mkdir -p /mnt/piCore-fat
sudo mount /dev/loop0p1 /mnt/piCore-fat
	• 挂载分区 2（Linux 分区）：
bash





sudo mkdir -p /mnt/piCore-linux
sudo mount -t ext4 /dev/loop0p2 /mnt/piCore-linux


生成 initrd 镜像
$ find . -print0 | cpio --null -ov --format=newc | gzip -9 > ../initramfs.cpio.gz


sudo qemu-system-aarch64 -M virt   -cpu cortex-a57  -smp 4  -m 2048 -kernel Image -append "console=ttyAMA0 init=/init"  -initrd rootfs_me.gz   -net nic  -net tap,ifname=tap0     -serial chardev:serial0 -chardev pty,id=serial0



ARM 版本的使用 

sudo qemu-system-aarch64 -M virt   -cpu cortex-a57  -smp 4  -m 2048 -kernel /home/cyx/workspace/opensource/linux_6.6.34/arch/arm64/boot/Image -initrd initramfs.cpio.gz -append "console=ttyAMA0  root=/dev/vda rw rootfstype=ext4  loglevel=7 "  -drive file=./rootfs.img,if=virtio,format=raw  -net nic  -net tap,ifname=tap0     -serial chardev:serial0 -chardev pty,id=serial0 -nographic

设置串口终端

/etc/inittab增加
tty2::respawn:/sbin/getty 921600 ttyS0

sudo qemu-system-aarch64 -M virt   -cpu cortex-a57  -smp 4  -m 2048 -kernel /home/cyx/workspace/opensource/linux_6.6.34/arch/arm64/boot/Image  -initrd initramfs.cpio.gz  -append "console=tty1  root=/dev/sda  loglevel=7 "  -drive file=./rootfs.img,format=raw  -net
nic  -net tap,ifname=tap0 -serial chardev:serial0 -chardev pty,id=serial0 -nographic


exec login -f root

sudo qemu-system-aarch64 -M virt   -cpu cortex-a57  -smp 4  -m 2048 -kernel /home/cyx/work_open/opensource/linux_6.6.34/arch/arm64/boot/Image  -initrd ../initramfs.cpio.gz  -append "console=ttyAMA0 root=/
dev/ram0  loglevel=7 " -net nic  -net tap,ifname=tap0 -serial chardev:serial0 -chardev pty,id=serial0 -nographic




Linux 的 Virtio 驱动并不一定依赖于 PCI，虽然 PCI 是 Virtio 驱动常见的一种传输机制，但 Virtio 本身支持多种传输方式。下面为你详细介绍：
1. Virtio 概述
Virtio 是一种用于虚拟化环境的半虚拟化 I/O 标准，旨在为虚拟机提供高效、灵活的 I/O 设备模拟。它定义了一套通用的接口和协议，使得虚拟机可以与宿主机进行高效的 I/O 交互。Virtio 主要由两部分组成：Virtio 设备（在虚拟机中）和 Virtio 后端（在宿主机中）。
2. 基于 PCI 的 Virtio 驱动
	• 原理：基于 PCI 的 Virtio 驱动是最常见的实现方式之一。在这种模式下，Virtio 设备通过 PCI 总线与宿主机进行通信。虚拟机将 Virtio 设备视为普通的 PCI 设备，通过 PCI 配置空间和 I/O 端口与设备进行交互。宿主机则通过 PCI 总线模拟 Virtio 设备的行为，实现与虚拟机的通信。
	• 示例：在 QEMU 虚拟化环境中，可以使用 -device virtio-blk-pci 参数来添加一个基于 PCI 的 Virtio 块设备。在 Linux 内核中，virtio_pci 模块提供了对基于 PCI 的 Virtio 设备的支持。
3. 非 PCI 的 Virtio 驱动
	• Virtio-MMIO：
		○ 原理：Virtio-MMIO 是另一种常见的 Virtio 传输方式，它通过内存映射 I/O（MMIO）来实现虚拟机与宿主机之间的通信。在这种模式下，Virtio 设备的配置空间和数据缓冲区被映射到虚拟机的内存空间中，虚拟机可以直接通过内存访问来与设备进行交互。
		○ 优点：相比于基于 PCI 的 Virtio 驱动，Virtio-MMIO 更加轻量级，不需要复杂的 PCI 总线配置，因此在一些资源受限的环境中（如嵌入式系统）更为适用。
		○ 示例：在一些 ARM 架构的虚拟化环境中，经常使用 Virtio-MMIO 来实现 Virtio 设备的模拟。在 Linux 内核中，virtio_mmio 模块提供了对 Virtio-MMIO 设备的支持。
	• Virtio over VirtioFS：VirtioFS 是一种用于在虚拟机和宿主机之间共享文件系统的 Virtio 协议。它通过 Virtio 接口实现文件系统的共享，不依赖于 PCI 总线。这种方式可以实现高效的文件共享，并且可以在不同的虚拟化平台上使用。


1、通过 virtio-blk 实现块设备
创建 dev 块设备文件
sudo mknod /dev/vda b 254 0

相关配置项
CONFIG_VIRTIO

Device Drivers 
  ->Block devices
    ->Virtio block driver

1.1  通过MMIO方式
 配置项
Location:                                                                                                               │
  │     -> Device Drivers                                                                                                     │
  │       -> Virtio drivers (VIRTIO_MENU [=y])                                                                                │
  │ (1)     -> Platform bus driver for memory mapped virtio devices (VIRTIO_MMIO [=y]) 
  
Qemu 启动参数
 -device virtio-blk-device,drive=myhd  -drive id=myhd,file=rootfs.img,if=none,format=raw

1.2 通过PCI方式
 配置项
  
Symbol: PCI_HOST_GENERIC [=y]                                                                                             │
  │ Type  : tristate                                                                                                          │
  │ Defined at drivers/pci/controller/Kconfig:126                                                                             │
  │   Prompt: Generic PCI host controller                                                                                     │
  │   Depends on: PCI [=y] && OF [=y]                                                                                         │
  │   Location:                                                                                                               │
  │     -> Device Drivers                                                                                                     │
  │       -> PCI support (PCI [=y])                                                                                           │
  │         -> PCI controller drivers                                                                                         │
  │ (1)       -> Generic PCI host controller (PCI_HOST_GENERIC [=y])                                                          │
  │ Selects: PCI_HOST_COMMON [=y] && IRQ_DOMAIN [=y] 

 Symbol: VIRTIO_PCI [=y]                                                                                                   │
  │ Type  : tristate                                                                                                          │
  │ Defined at drivers/virtio/Kconfig:50                                                                                      │
  │   Prompt: PCI driver for virtio devices                                                                                   │
  │   Depends on: VIRTIO_MENU [=y] && PCI [=y]                                                                                │
  │   Location:                                                                                                               │
  │     -> Device Drivers                                                                                                     │
  │       -> Virtio drivers (VIRTIO_MENU [=y])                                                                                │
  │ (1)     -> PCI driver for virtio devices (VIRTIO_PCI [=y])                                                                │
  │ Selects: VIRTIO_PCI_LIB [=y] && VIRTIO [=y]                                                                               │
  │                                                                                                                           │
  │                                                                                                                           │
  │ Symbol: VIRTIO_PCI_LEGACY [=y]                                                                                            │
  │ Type  : bool                                                                                                              │
  │ Defined at drivers/virtio/Kconfig:63                                                                                      │
  │   Prompt: Support for legacy virtio draft 0.9.X and older devices                                                         │
  │   Depends on: VIRTIO_MENU [=y] && VIRTIO_PCI [=y]                                                                         │
  │   Location:                                                                                                               │
  │     -> Device Drivers                                                                                                     │
  │       -> Virtio drivers (VIRTIO_MENU [=y])                                                                                │
  │         -> PCI driver for virtio devices (VIRTIO_PCI [=y])                                                                │
  │ (2)       -> Support for legacy virtio draft 0.9.X and older devices (VIRTIO_PCI_LEGACY [=y])                             │
  │ Selects: VIRTIO_PCI_LIB_LEGACY [=y]

Qemu 参数
 -device virtio-blk-pci,drive=myhd -drive id=myhd,file=rootfs.img,if=none,format=raw
如果不指定 参数，而是使用  -drive file=./rootfs.img,format=raw  ，也会走pci总线

	2. 模拟SCSI磁盘设备

在x86 架构中  ，默认使用  SCSI的磁盘，不需要额外参数设置

Arm64上的设置
  │ Symbol: SCSI_VIRTIO [=y]                                                                                                  │
  │ Type  : tristate                                                                                                          │
  │ Defined at drivers/scsi/Kconfig:1512                                                                                      │
  │   Prompt: virtio-scsi support                                                                                             │
  │   Depends on: SCSI_LOWLEVEL [=y] && SCSI [=y] && VIRTIO [=y]                                                              │
  │   Location:                                                                                                               │
  │     -> Device Drivers                                                                                                     │
  │       -> SCSI device support                                                                                              │
  │         -> SCSI low-level drivers (SCSI_LOWLEVEL [=y])                                                                    │
  │ (1)       -> virtio-scsi support (SCSI_VIRTIO [=y])


qemu参数设置：
 -device virtio-scsi-device,id=scsi0 -device scsi-hd,drive=hd0 -drive file=rootfs.img,format=raw,if=none,id=hd0


-device virtio-scsi-device,id=scsi0
此选项的作用是在虚拟机里创建一个 Virtio SCSI 控制器设备，并且给该控制器赋予一个唯一的标识符 scsi0。Virtio 是一种用于虚拟化环境的半虚拟化设备模型，而 Virtio SCSI 控制器则是专门用来模拟 SCSI 总线的设备，它能够让虚拟机和外部存储设备进行交互。简单来说，这一步是在虚拟机中搭建了一个用于连接存储设备的 “桥梁”。
-device scsi-hd,drive=hd0
这个选项的功能是在之前创建的 Virtio SCSI 控制器（scsi0）上添加一个 SCSI 硬盘设备。drive=hd0 表示该硬盘设备会关联到一个名为 hd0 的驱动器，而这个驱动器在后续通过 -drive 选项来定义其具体的存储介质（例如一个文件、RAM 磁盘等）。可以理解为，这一步是在前面搭建好的 “桥梁” 上连接了一个具体的 “存储设备”。

SCSI磁盘：
 sudo qemu-system-aarch64 -M virt   -cpu cortex-a57  -smp 4  -m 2048 -kernel /home/cyx/work_open/opensource/linux_6.6.34/arch/arm64/boot/Image -append "console=ttyAMA0  root=/dev/sda  loglevel=7 "  -net nic  -net
 tap,ifname=tap0 -serial chardev:serial0 -chardev pty,id=serial0 -nographic  -device virtio-scsi-device,id=scsi0 -device scsi-hd,d
rive=hd0 -drive file=rootfs.img,format=raw,if=none,id=hd0

Virtio PCI:
 sudo qemu-system-aarch64 -M virt   -cpu cortex-a57  -smp 4  -m 2048 -kernel /home/cyx/work_open/opensource/linux_6.6.34/arch/arm64/boot/Image -append "console=ttyAMA0  root=/dev/vda  loglevel=7 "  -net nic  -net  tap,ifna
me=tap0 -serial chardev:serial0 -chardev pty,id=serial0 -nographic   -device virtio-blk-pci,drive=myhd -drive id=myhd,file=rootfs.img,if=none,format=raw
或
sudo qemu-system-aarch64 -M virt   -cpu cortex-a57  -smp 4  -m 2048 -kernel /home/cyx/work_open/opensource/linux_6.6.34/arch/arm64/boot/Image -append "console=ttyAMA0  root=/dev/vda  loglevel=7 "  -net nic  -net  tap,ifname=tap0 -serial chardev:serial0 -chardev pty,id=serial0 -nographic  -drive file=./rootfs.img,format=raw

Virtio MMIO:
sudo qemu-system-aarch64 -M virt   -cpu cortex-a57  -smp 4  -m 2048 -kernel /home/cyx/work_open/opensource/linux_6.6.34/arch/arm64/boot/Image -append "console=ttyAMA0  root=/dev/vda  loglevel=7 "  -net nic  -net  tap,ifname=tap0 -serial chardev:serial0 -chardev pty,id=serial0 -nographic  -device virtio-blk-device,drive=myhd  -drive id=myhd,file=rootfs.img,if=none,format=raw



sudo qemu-system-aarch64 -M virt   -cpu cortex-a57  -smp 4  -m 2048 -kernel /home/cyx/workspace/opensource
/linux_6.6.34/arch/arm64/boot/Image -append "console=ttyAMA0 root=/dev/sda  loglevel=7"  -net nic  -net tap,ifname=tap0 -serial chardev:serial0 -chardev pty,id=serial0 -nographic  -device virtio-scsi-device,id=scsi0  -device scsi-hd,drive=hd0 -drive file=rootfs.img,format=raw,if=none,id=hd0




